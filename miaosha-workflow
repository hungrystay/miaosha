业务流程如下：
1.登录：
*	客户端：    向服务端登录接口发送ajax请求(login/do_login)，带上手机号和密码

*	服务端：    
            1)  根据用户提供的手机号，向数据库中查找用户是否存在，并且验证密码。验证不通过，直接向登录页面返回提示信息；验证过，进入2)
            2） 生成一个token(UUID.random())
    -       3)  将(token，user)存储到redis中，以后的接口需要用户验证的时候直接查找redis，不用查找mysql，提高访问速度
            4)  将("token", token)加入到response中，准备返回给客户端，并添加到客户端的cookie中，客户端之后再次发送请求需要进行用
                户验证的时候可以直接以token作为key值来获取redis中的user。每次在使用token值获取user后，需要重新在cookie和redis中
                设置token的失效时间，保证token能正常失效
            5)  向客户端返回

            备注：Token作用：一是为了防止用户没有登录直接刷其他接口，二是在分布式session中存储用户信息
*   客户端：    ajax请求返回后的函数回调中向服务端发送商品列表的请求(goods/to_list)

*   服务端：    
            1） 进行用户登录验证，查看Token是否存在，如果用户没有登录，返回登录页面，否则进入2）
    -       2） 在redis中查找商品列表页面，如果没有，则在数据库中查找
            3） 手动渲染出商品页面
    -       4） 将手动渲染出的页面(渲染成一个字符串)存储到redis中
            5） 返回手动渲染出的页面
            备注：对热点商品进行缓存存储，减轻数据库访问压力

*   客户端：    向服务端请求秒杀商品详情，直接跳转向静态页面

*   服务端： 
            返回秒杀商品详情，页面可以实现静态化
*   客户端：    ajax请求，向服务端请求秒杀接口地址(miaosha/path)

*   服务端：  
            1） 在redis中拿到user信息
            2） 通过md5加密的方式生成加密中间串，之后这个串会作为秒杀接口串的一部分
    -       3） 以goodsId + userId为key,将秒杀接口地址存放到redis中
            4） 返回秒杀地址
*   客户端：    ajax请求返回后，在返回回调函数中向服务端发送秒杀请求(/miaosha/path/do_miaosha)

*   服务端：
            1)  验证登录用户信息
            2） 验证秒杀地址是否正确，防止恶意用户知道秒杀地址后对秒杀接口恶意刷单
            3） 在内存中查看秒杀商品是否已经秒杀完，如果已经秒杀完，则返回；否则进入4）
    -       4） redis中预减库存，库存已卖完，则返回卖完信息；否则进入5）
            5） 判断是否重复秒杀，若已经秒杀，则返回重复秒杀信息；否则进入6)
    -       6)  将用户信息和秒杀商品信息加入到队列中(rabbitmq)，等待消费
            7） 返回客户端正在排队的信息

                                                                        rabbitmq receive到用户信息和秒杀商品信息后
                                                                        进行真正的秒杀操作：
                                                                            *   减库存
                                                                            *   创建秒杀订单表
                                                                            *   创建商品订单表


*   客户端：    请求返回后，轮询返回结果接口(/miaosha/result)

*   服务端：    
            看数据库中的秒杀订单是否生成，若生成则向用户返回成功，若失败，则返回失败结果


*   客户端：    接收到相应的结果进行继续轮询或者跳转到静态订单页面，等待支付

